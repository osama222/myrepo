import scala.io.Source

val ordersRaw = Source.fromFile("/home/user/Downloads/data-master/retail_db/orders/part-00000").getLines.toList
val orders = sc.parallelize(ordersRaw)

val customersRaw = Source.fromFile("/home/user/Downloads/data-master/retail_db/customers/part-00000").getLines.toList
val customers = sc.parallelize(customersRaw)
// we need to convert the orders and customers to a tuple to be able to do left outer join to them
val ordersMap = orders.
  map(order => (order.split(",")(2).toInt, 1))
val customersMap = customers.
  map(c => (c.split(",")(0).toInt, (c.split(",")(2), c.split(",")(1))))
val customersLeftOuterJoinOrders = customersMap.leftOuterJoin(ordersMap)
val inactiveCustomersSorted = customersLeftOuterJoinOrders.
  filter(t => t._2._2 == None).
  map(rec => rec._2).
  sortByKey()
inactiveCustomersSorted.
  map(rec => rec._1._1 + ", " + rec._1._2).
  saveAsTextFile("/user/cloudera/solutions/solutions02/inactive_customers")
 
// to validate
sc.textFile("/user/cloudera/solutions/solutions02/inactive_customers").take(10).foreach(println)
