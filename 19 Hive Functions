// from hive get a lenght of a string
select length('hello world');
// select length of a column in a table
use obg_retail_db_txt;
select order_status, length(order_status) from orders limit 10;
// using substr to extract a substring from a whoel string
select substr('hello world, how are you', 14); // here the index starts from 1 not 0, the secnod param is the starting position
select substr('hello world, how are you', 7, 5); // here start position is the 7th char and the length is the 5th char
select "hello world, how are you" like '%world%';
select lower("Hello World, How ARE you");
select upper("Hello World, How ARE you");
select trim(" hello world, how are you ");
select order_date from orders limit 10;
select substr(order_date, 6, 2) from orders limit 10;
select current_timestamp;
select to_date(current_timestamp);
select to_unix_timestamp(current_timestamp);
select to_date(order_date) from orders limit 10;
// using case 
select order_status,
       case  
            when order_status IN ('CLOSED', 'COMPLETE') then 'No Action' 
            when order_status IN ('ON_HOLD', 'PAYMENT_REVIEW', 'PENDING', 'PENDING_PAYMENT', 'PROCESSING') then 'Pending Action'
            else 'Risky'
       end from orders limit 10;
       
// using date_format
select date_format ('2013-07-04 11:32:45.0', 'YYYYMM');
// another way to extract date from orders table and conver it to int
select cast(date_format(order_date, 'YYYYMM') as int) from orders limit 10;

select o.*, c.* 
from orders o, customers c
where o.order_customer_id = c.customer_id
limit 10;
// using inner join
select o.*, c.* 
from orders o join customers c
on o.order_customer_id = c.customer_id
limit 10;

select c.* from customers c left outer join orders o
on o.order_customer_id = c.customer_id
where o.order_customer_id is null;

select o.order_id, o.order_date, o.order_status, round(sum(oi.order_item_subtotal), 2) order_revenue
from orders o join order_items oi
on o.order_id = oi.order_item_order_id
where o.order_status in ('COMPLETE', 'CLOSED')
group by o.order_id, o.order_date, o.order_status
having sum(oi.order_item_subtotal) >= 1000;

// get the data in an asc by date and desc by revenue
select o.order_id, o.order_date, o.order_status, round(sum(oi.order_item_subtotal), 2) order_revenue
from orders o join order_items oi
on o.order_id = oi.order_item_order_id
where o.order_status in ('COMPLETE', 'CLOSED')
group by o.order_id, o.order_date, o.order_status
having sum(oi.order_item_subtotal) >= 1000
order by o.order_date, order_revenue desc;
// using distribute by is more scalable with large datasets, the downside is the order_date won't be globally distributed
select o.order_id, o.order_date, o.order_status, round(sum(oi.order_item_subtotal), 2) order_revenue
from orders o join order_items oi
on o.order_id = oi.order_item_order_id
where o.order_status in ('COMPLETE', 'CLOSED')
group by o.order_id, o.order_date, o.order_status
having sum(oi.order_item_subtotal) >= 1000
distribute by o.order_date sort by o.order_date, order_revenue desc;






