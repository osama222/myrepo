
val crimeData = sc.textFile("/user/cloudera/crimesdataset/crimes.csv")
// display top 10 records
crimeData.take(10).foreach(println)
// ID,Case Number,Date,Block,IUCR,Primary Type,Description,Location Description,Arrest,Domestic,Beat,District,Ward,Community Area,FBI Code,X Coordinate,Y Coordinate,Year,Updated On,Latitude,Longitude,Location
//4647369,HM155213,01/31/2006 12:13:05 PM,066XX N BOSWORTH AVE,1811,NARCOTICS,POSS: CANNABIS 30GMS OR LESS,"SCHOOL, PUBLIC, BUILDING",true,false,2432,024,40,1,18,1164737,1944193,2006,04/15/2016 08:55:02 AM,42.002478396,-87.66929687,"(42.002478396, -87.66929687)"
// we need to exclude the header from the dataset

val header = crimeData.first
val crimeDataWithoutHeader = crimeData.filter(criminalRecord => criminalRecord != header)

// crimeDataWithoutHeader.map(rec => rec.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", -1)(7)).take(10).foreach(println)

val crimeCountForResidence = sc.parallelize(crimeDataWithoutHeader.filter(rec => rec.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", -1)(7) == "RESIDENCE").
  map(rec => (rec.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", -1)(5),1)).
  reduceByKey((total, value) => total + value).
  map(rec => (rec._2, rec._1)).
  sortByKey(false).
  take(3))

crimeCountForResidence.collect.foreach(println)

crimeCountForResidence.map(rec => (rec._2, rec._1)).
  toDF("crime_type", "crime_count").
  write.json("/user/cloudera/solutions/solution03/RESIDENCE_AREA_CRIMINAL_TYPE_DATA")

// to check
sc.textFile("/user/cloudera/solutions/solution03/RESIDENCE_AREA_CRIMINAL_TYPE_DATA").take(10).foreach(println)
